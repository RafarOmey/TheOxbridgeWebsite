import { __decorate, __param } from 'tslib';
import { Attribute, Directive, forwardRef, NgModule } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';

var ValidateEqualDirective_1;
let ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {
    constructor(otherControl) {
        this.otherControl = otherControl;
    }
    ngOnDestroy() {
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
    }
    validate(selfControl) {
        const selfControlValue = selfControl.value;
        const otherControl = selfControl.root.get(this.otherControl);
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
        // this code works when user types in other control putting the error in self control
        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {
            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {
                selfControl.setErrors({
                    notEqual: true
                });
            }
            else {
                if (selfControl.hasError('notEqual')) {
                    delete selfControl.errors['notEqual'];
                    if (!Object.keys(selfControl.errors).length) {
                        selfControl.setErrors(null);
                    }
                }
            }
        });
        // this code works when the user types in self control putting the error in self control
        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {
            return {
                notEqual: true
            };
        }
        return null;
    }
    isEqual(val1, val2) {
        val1 = this.unifyEmptyStrings(val1);
        val2 = this.unifyEmptyStrings(val2);
        return val1 === val2;
    }
    unifyEmptyStrings(val) {
        const isDefined = this.isDefined;
        if (val === null || !isDefined(val)) {
            val = '';
        }
        return val;
    }
    isDefined(value) {
        const defaultUndefined = void (0);
        return value !== defaultUndefined;
    }
};
ValidateEqualDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }
];
ValidateEqualDirective = ValidateEqualDirective_1 = __decorate([
    Directive({
        selector: '[ngValidateEqual]',
        providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }
        ]
    }),
    __param(0, Attribute('ngValidateEqual'))
], ValidateEqualDirective);

let ValidateEqualModule = class ValidateEqualModule {
};
ValidateEqualModule = __decorate([
    NgModule({
        declarations: [ValidateEqualDirective],
        imports: [],
        exports: [ValidateEqualDirective]
    })
], ValidateEqualModule);

/*
 * Public API Surface of ng-validate-equal
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ValidateEqualDirective, ValidateEqualModule };
//# sourceMappingURL=ng-validate-equal.js.map
