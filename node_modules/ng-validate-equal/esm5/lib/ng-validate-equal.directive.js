import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
var ValidateEqualDirective = /** @class */ (function () {
    function ValidateEqualDirective(otherControl) {
        this.otherControl = otherControl;
    }
    ValidateEqualDirective_1 = ValidateEqualDirective;
    ValidateEqualDirective.prototype.ngOnDestroy = function () {
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
    };
    ValidateEqualDirective.prototype.validate = function (selfControl) {
        var _this = this;
        var selfControlValue = selfControl.value;
        var otherControl = selfControl.root.get(this.otherControl);
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
        // this code works when user types in other control putting the error in self control
        this.valueChangesSub = otherControl.valueChanges.subscribe(function (otherControlValue) {
            if (!_this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {
                selfControl.setErrors({
                    notEqual: true
                });
            }
            else {
                if (selfControl.hasError('notEqual')) {
                    delete selfControl.errors['notEqual'];
                    if (!Object.keys(selfControl.errors).length) {
                        selfControl.setErrors(null);
                    }
                }
            }
        });
        // this code works when the user types in self control putting the error in self control
        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {
            return {
                notEqual: true
            };
        }
        return null;
    };
    ValidateEqualDirective.prototype.isEqual = function (val1, val2) {
        val1 = this.unifyEmptyStrings(val1);
        val2 = this.unifyEmptyStrings(val2);
        return val1 === val2;
    };
    ValidateEqualDirective.prototype.unifyEmptyStrings = function (val) {
        var isDefined = this.isDefined;
        if (val === null || !isDefined(val)) {
            val = '';
        }
        return val;
    };
    ValidateEqualDirective.prototype.isDefined = function (value) {
        var defaultUndefined = void (0);
        return value !== defaultUndefined;
    };
    var ValidateEqualDirective_1;
    ValidateEqualDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }
    ]; };
    ValidateEqualDirective = ValidateEqualDirective_1 = __decorate([
        Directive({
            selector: '[ngValidateEqual]',
            providers: [
                { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return ValidateEqualDirective_1; }), multi: true }
            ]
        }),
        __param(0, Attribute('ngValidateEqual'))
    ], ValidateEqualDirective);
    return ValidateEqualDirective;
}());
export { ValidateEqualDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdmFsaWRhdGUtZXF1YWwvIiwic291cmNlcyI6WyJsaWIvbmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUE4QixhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVMzRTtJQUlJLGdDQUFpRCxZQUFvQjtRQUFwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtJQUVyRSxDQUFDOytCQU5RLHNCQUFzQjtJQVEvQiw0Q0FBVyxHQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQseUNBQVEsR0FBUixVQUFTLFdBQTRCO1FBQXJDLGlCQW1DQztRQWpDRyxJQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDM0MsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTdELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RDO1FBRUQscUZBQXFGO1FBQ3JGLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQ3RELFVBQUEsaUJBQWlCO1lBQ2IsSUFBSSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNsRyxXQUFXLENBQUMsU0FBUyxDQUNqQjtvQkFDSSxRQUFRLEVBQUUsSUFBSTtpQkFDakIsQ0FDSixDQUFDO2FBQ0w7aUJBQU07Z0JBQ0gsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUNsQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUU7d0JBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFBRTtpQkFDaEY7YUFDSjtRQUNMLENBQUMsQ0FDSixDQUFDO1FBRUYsd0ZBQXdGO1FBQ3hGLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25HLE9BQU87Z0JBQ0gsUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVPLHdDQUFPLEdBQWYsVUFBZ0IsSUFBSSxFQUFFLElBQUk7UUFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLE9BQU8sSUFBSSxLQUFLLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRU8sa0RBQWlCLEdBQXpCLFVBQTBCLEdBQUc7UUFDekIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakMsR0FBRyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRU8sMENBQVMsR0FBakIsVUFBa0IsS0FBSztRQUNuQixJQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxPQUFPLEtBQUssS0FBSyxnQkFBZ0IsQ0FBQztJQUN0QyxDQUFDOzs7NkNBakVZLFNBQVMsU0FBQyxpQkFBaUI7O0lBSi9CLHNCQUFzQjtRQU5sQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLFNBQVMsRUFBRTtnQkFDUCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsd0JBQXNCLEVBQXRCLENBQXNCLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2FBQ2pHO1NBQ0osQ0FBQztRQUtlLFdBQUEsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0FKaEMsc0JBQXNCLENBdUVsQztJQUFELDZCQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0F2RVksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBBdHRyaWJ1dGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW25nVmFsaWRhdGVFcXVhbF0nLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBWYWxpZGF0ZUVxdWFsRGlyZWN0aXZlKSwgbXVsdGk6IHRydWUgfVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmFsaWRhdGVFcXVhbERpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25EZXN0cm95IHtcclxuXHJcbiAgICBwcml2YXRlIHZhbHVlQ2hhbmdlc1N1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBBdHRyaWJ1dGUoJ25nVmFsaWRhdGVFcXVhbCcpIHB1YmxpYyBvdGhlckNvbnRyb2w6IHN0cmluZykge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZUNoYW5nZXNTdWIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXNTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGUoc2VsZkNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG5cclxuICAgICAgICBjb25zdCBzZWxmQ29udHJvbFZhbHVlID0gc2VsZkNvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgY29uc3Qgb3RoZXJDb250cm9sID0gc2VsZkNvbnRyb2wucm9vdC5nZXQodGhpcy5vdGhlckNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52YWx1ZUNoYW5nZXNTdWIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXNTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoaXMgY29kZSB3b3JrcyB3aGVuIHVzZXIgdHlwZXMgaW4gb3RoZXIgY29udHJvbCBwdXR0aW5nIHRoZSBlcnJvciBpbiBzZWxmIGNvbnRyb2xcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlc1N1YiA9IG90aGVyQ29udHJvbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICBvdGhlckNvbnRyb2xWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFcXVhbChzZWxmQ29udHJvbFZhbHVlLCBvdGhlckNvbnRyb2xWYWx1ZSkgJiYgKHNlbGZDb250cm9sLnRvdWNoZWQgfHwgc2VsZkNvbnRyb2wuZGlydHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZkNvbnRyb2wuc2V0RXJyb3JzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFcXVhbDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGZDb250cm9sLmhhc0Vycm9yKCdub3RFcXVhbCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmQ29udHJvbC5lcnJvcnNbJ25vdEVxdWFsJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoc2VsZkNvbnRyb2wuZXJyb3JzKS5sZW5ndGgpIHsgc2VsZkNvbnRyb2wuc2V0RXJyb3JzKG51bGwpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcyBjb2RlIHdvcmtzIHdoZW4gdGhlIHVzZXIgdHlwZXMgaW4gc2VsZiBjb250cm9sIHB1dHRpbmcgdGhlIGVycm9yIGluIHNlbGYgY29udHJvbFxyXG4gICAgICAgIGlmICghdGhpcy5pc0VxdWFsKHNlbGZDb250cm9sVmFsdWUsIG90aGVyQ29udHJvbC52YWx1ZSkgJiYgKHNlbGZDb250cm9sLnRvdWNoZWQgfHwgc2VsZkNvbnRyb2wuZGlydHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBub3RFcXVhbDogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0VxdWFsKHZhbDEsIHZhbDIpIHtcclxuICAgICAgICB2YWwxID0gdGhpcy51bmlmeUVtcHR5U3RyaW5ncyh2YWwxKTtcclxuICAgICAgICB2YWwyID0gdGhpcy51bmlmeUVtcHR5U3RyaW5ncyh2YWwyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1bmlmeUVtcHR5U3RyaW5ncyh2YWwpIHtcclxuICAgICAgICBjb25zdCBpc0RlZmluZWQgPSB0aGlzLmlzRGVmaW5lZDtcclxuICAgICAgICBpZiAodmFsID09PSBudWxsIHx8ICFpc0RlZmluZWQodmFsKSkge1xyXG4gICAgICAgICAgICB2YWwgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRGVmaW5lZCh2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRVbmRlZmluZWQgPSB2b2lkICgwKTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IGRlZmF1bHRVbmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==