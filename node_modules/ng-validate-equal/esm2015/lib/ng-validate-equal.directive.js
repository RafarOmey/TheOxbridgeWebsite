var ValidateEqualDirective_1;
import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
let ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {
    constructor(otherControl) {
        this.otherControl = otherControl;
    }
    ngOnDestroy() {
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
    }
    validate(selfControl) {
        const selfControlValue = selfControl.value;
        const otherControl = selfControl.root.get(this.otherControl);
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
        // this code works when user types in other control putting the error in self control
        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {
            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {
                selfControl.setErrors({
                    notEqual: true
                });
            }
            else {
                if (selfControl.hasError('notEqual')) {
                    delete selfControl.errors['notEqual'];
                    if (!Object.keys(selfControl.errors).length) {
                        selfControl.setErrors(null);
                    }
                }
            }
        });
        // this code works when the user types in self control putting the error in self control
        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {
            return {
                notEqual: true
            };
        }
        return null;
    }
    isEqual(val1, val2) {
        val1 = this.unifyEmptyStrings(val1);
        val2 = this.unifyEmptyStrings(val2);
        return val1 === val2;
    }
    unifyEmptyStrings(val) {
        const isDefined = this.isDefined;
        if (val === null || !isDefined(val)) {
            val = '';
        }
        return val;
    }
    isDefined(value) {
        const defaultUndefined = void (0);
        return value !== defaultUndefined;
    }
};
ValidateEqualDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }
];
ValidateEqualDirective = ValidateEqualDirective_1 = __decorate([
    Directive({
        selector: '[ngValidateEqual]',
        providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }
        ]
    }),
    __param(0, Attribute('ngValidateEqual'))
], ValidateEqualDirective);
export { ValidateEqualDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdmFsaWRhdGUtZXF1YWwvIiwic291cmNlcyI6WyJsaWIvbmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBOEIsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFTM0UsSUFBYSxzQkFBc0IsOEJBQW5DLE1BQWEsc0JBQXNCO0lBSS9CLFlBQWlELFlBQW9CO1FBQXBCLGlCQUFZLEdBQVosWUFBWSxDQUFRO0lBRXJFLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLFdBQTRCO1FBRWpDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFN0QsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEM7UUFFRCxxRkFBcUY7UUFDckYsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDdEQsaUJBQWlCLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xHLFdBQVcsQ0FBQyxTQUFTLENBQ2pCO29CQUNJLFFBQVEsRUFBRSxJQUFJO2lCQUNqQixDQUNKLENBQUM7YUFDTDtpQkFBTTtnQkFDSCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQ2xDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRTt3QkFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUFFO2lCQUNoRjthQUNKO1FBQ0wsQ0FBQyxDQUNKLENBQUM7UUFFRix3RkFBd0Y7UUFDeEYsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkcsT0FBTztnQkFDSCxRQUFRLEVBQUUsSUFBSTthQUNqQixDQUFDO1NBQ0w7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8sT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJO1FBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxPQUFPLElBQUksS0FBSyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVPLGlCQUFpQixDQUFDLEdBQUc7UUFDekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakMsR0FBRyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQUs7UUFDbkIsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsT0FBTyxLQUFLLEtBQUssZ0JBQWdCLENBQUM7SUFDdEMsQ0FBQztDQUVKLENBQUE7O3lDQW5FZ0IsU0FBUyxTQUFDLGlCQUFpQjs7QUFKL0Isc0JBQXNCO0lBTmxDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsU0FBUyxFQUFFO1lBQ1AsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsd0JBQXNCLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ2pHO0tBQ0osQ0FBQztJQUtlLFdBQUEsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUE7R0FKaEMsc0JBQXNCLENBdUVsQztTQXZFWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEF0dHJpYnV0ZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbmdWYWxpZGF0ZUVxdWFsXScsXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFZhbGlkYXRlRXF1YWxEaXJlY3RpdmUpLCBtdWx0aTogdHJ1ZSB9XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBWYWxpZGF0ZUVxdWFsRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIHByaXZhdGUgdmFsdWVDaGFuZ2VzU3ViOiBTdWJzY3JpcHRpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IoQEF0dHJpYnV0ZSgnbmdWYWxpZGF0ZUVxdWFsJykgcHVibGljIG90aGVyQ29udHJvbDogc3RyaW5nKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlQ2hhbmdlc1N1Yikge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlc1N1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShzZWxmQ29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGZDb250cm9sVmFsdWUgPSBzZWxmQ29udHJvbC52YWx1ZTtcclxuICAgICAgICBjb25zdCBvdGhlckNvbnRyb2wgPSBzZWxmQ29udHJvbC5yb290LmdldCh0aGlzLm90aGVyQ29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlQ2hhbmdlc1N1Yikge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlc1N1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGhpcyBjb2RlIHdvcmtzIHdoZW4gdXNlciB0eXBlcyBpbiBvdGhlciBjb250cm9sIHB1dHRpbmcgdGhlIGVycm9yIGluIHNlbGYgY29udHJvbFxyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VzU3ViID0gb3RoZXJDb250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIG90aGVyQ29udHJvbFZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0VxdWFsKHNlbGZDb250cm9sVmFsdWUsIG90aGVyQ29udHJvbFZhbHVlKSAmJiAoc2VsZkNvbnRyb2wudG91Y2hlZCB8fCBzZWxmQ29udHJvbC5kaXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmQ29udHJvbC5zZXRFcnJvcnMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVxdWFsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZkNvbnRyb2wuaGFzRXJyb3IoJ25vdEVxdWFsJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGZDb250cm9sLmVycm9yc1snbm90RXF1YWwnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhzZWxmQ29udHJvbC5lcnJvcnMpLmxlbmd0aCkgeyBzZWxmQ29udHJvbC5zZXRFcnJvcnMobnVsbCk7IH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0aGlzIGNvZGUgd29ya3Mgd2hlbiB0aGUgdXNlciB0eXBlcyBpbiBzZWxmIGNvbnRyb2wgcHV0dGluZyB0aGUgZXJyb3IgaW4gc2VsZiBjb250cm9sXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRXF1YWwoc2VsZkNvbnRyb2xWYWx1ZSwgb3RoZXJDb250cm9sLnZhbHVlKSAmJiAoc2VsZkNvbnRyb2wudG91Y2hlZCB8fCBzZWxmQ29udHJvbC5kaXJ0eSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5vdEVxdWFsOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRXF1YWwodmFsMSwgdmFsMikge1xyXG4gICAgICAgIHZhbDEgPSB0aGlzLnVuaWZ5RW1wdHlTdHJpbmdzKHZhbDEpO1xyXG4gICAgICAgIHZhbDIgPSB0aGlzLnVuaWZ5RW1wdHlTdHJpbmdzKHZhbDIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsMSA9PT0gdmFsMjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVuaWZ5RW1wdHlTdHJpbmdzKHZhbCkge1xyXG4gICAgICAgIGNvbnN0IGlzRGVmaW5lZCA9IHRoaXMuaXNEZWZpbmVkO1xyXG4gICAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgIWlzRGVmaW5lZCh2YWwpKSB7XHJcbiAgICAgICAgICAgIHZhbCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNEZWZpbmVkKHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFVuZGVmaW5lZCA9IHZvaWQgKDApO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gZGVmYXVsdFVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19